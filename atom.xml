<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hurried1y</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-12T06:32:30.658Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Hurried1y</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rpc-framework-2</title>
    <link href="http://example.com/2023/05/12/rpc-framework-2/"/>
    <id>http://example.com/2023/05/12/rpc-framework-2/</id>
    <published>2023-05-12T06:18:57.000Z</published>
    <updated>2023-05-12T06:32:30.658Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简易RPC框架-服务注册模块"><a href="#简易RPC框架-服务注册模块" class="headerlink" title="简易RPC框架 - 服务注册模块"></a>简易RPC框架 - 服务注册模块</h3><h4 id="1、结构设计"><a href="#1、结构设计" class="headerlink" title="1、结构设计"></a>1、结构设计</h4><p>首先定义了三个注解：@RpcService、@RpcReference、@RpcScan</p><p>@RpcService用于标注服务提供者，@RpcReference用于标注服务消费者，@RpcScan用于扫描特定的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RpcService &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service version, default value is empty string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">version</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service group, default value is empty string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">group</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RpcReference &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service version, default value is empty string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">version</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service group, default value is empty string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">group</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(CustomScannerRegistrar.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RpcScan &#123;</span><br><span class="line">    String[] basePackage() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、实现"><a href="#2、实现" class="headerlink" title="2、实现"></a>2、实现</h4><p>服务注册模块采用注解加包扫描的方式去实现，将标注了@RpcService服务的元信息注册到Zookeeper，然后客户端要向服务端发送消息时，就可以从Zookeeper中获取远程服务的信息完成服务的调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在bean初始化之前调用</span></span><br><span class="line"><span class="comment"> * 判断bean是否有RpcService注解，如果有则将bean注册到zk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean bean实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName bean名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bean实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="comment">//判断bean是否有RpcService注解</span></span><br><span class="line">    <span class="keyword">if</span>(bean.getClass().isAnnotationPresent(RpcService.class))&#123;</span><br><span class="line">        <span class="type">NettyRpcServer</span> <span class="variable">nettyRpcServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NettyRpcServer</span>();</span><br><span class="line">        log.info(<span class="string">&quot;[&#123;&#125;] is annotated with [&#123;&#125;]&quot;</span>, bean.getClass().getName(), RpcService.class.getCanonicalName());</span><br><span class="line">        <span class="comment">//get RpcService annotation</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">RpcService</span> <span class="variable">annotation</span> <span class="operator">=</span> bean.getClass().getAnnotation(RpcService.class);</span><br><span class="line">        <span class="comment">//build RpcServiceProperties</span></span><br><span class="line">        <span class="type">RpcServiceConfig</span> <span class="variable">rpcServiceConfig</span> <span class="operator">=</span> RpcServiceConfig.builder()</span><br><span class="line">                .group(annotation.group())</span><br><span class="line">                .version(annotation.version())</span><br><span class="line">                .service(bean).build();</span><br><span class="line">        <span class="comment">//将每一个service bean保存到map中</span></span><br><span class="line">        rpcServiceConfig.setService(bean);</span><br><span class="line">        nettyRpcServer.exposeService(rpcServiceConfig);</span><br><span class="line">        nettyRpcServer.start();</span><br><span class="line">        <span class="comment">//注册服务到zk</span></span><br><span class="line">        serviceProvider.publishService(rpcServiceConfig);</span><br><span class="line">    &#125;<span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中包扫描的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomScannerRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span>, ResourceLoaderAware &#123;</span><br><span class="line">    <span class="comment">//扫描框架项目的bean</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SPRING_BEAN_BASE_PACKAGE</span> <span class="operator">=</span> <span class="string">&quot;com.hurried1y&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BASE_PACKAGE_ATTRIBUTE_NAME</span> <span class="operator">=</span> <span class="string">&quot;basePackage&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry, BeanNameGenerator importBeanNameGenerator)</span> &#123;</span><br><span class="line">        <span class="comment">//获取注解属性</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">AnnotationAttributes</span> <span class="variable">annotationAttributes</span> <span class="operator">=</span> AnnotationAttributes.fromMap(importingClassMetadata.getAnnotationAttributes(RpcScan.class.getName()));</span><br><span class="line">        <span class="comment">//获取注解属性中的basePackage</span></span><br><span class="line">        String[] rpcScanBasePackages = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(annotationAttributes != <span class="literal">null</span>)&#123;</span><br><span class="line">            rpcScanBasePackages = annotationAttributes.getStringArray(BASE_PACKAGE_ATTRIBUTE_NAME);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有指定扫描包，则默认扫描当前类所在的包</span></span><br><span class="line">        <span class="keyword">if</span>(rpcScanBasePackages.length == <span class="number">0</span>)&#123;</span><br><span class="line">            rpcScanBasePackages = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;((StandardAnnotationMetadata) importingClassMetadata).getIntrospectedClass().getPackage().getName()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//扫描 RpcService 注解的扫描器</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CustomScanner</span> <span class="variable">rpcServiceScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomScanner</span>(registry, RpcService.class);</span><br><span class="line">        <span class="comment">//扫描 Component 注解的扫描器</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CustomScanner</span> <span class="variable">componentScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomScanner</span>(registry, Component.class);</span><br><span class="line">        <span class="comment">//设置扫描包</span></span><br><span class="line">        <span class="keyword">if</span>(resourceLoader != <span class="literal">null</span>)&#123;</span><br><span class="line">            rpcServiceScanner.setResourceLoader(resourceLoader);</span><br><span class="line">            componentScanner.setResourceLoader(resourceLoader);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">springBeanAmount</span> <span class="operator">=</span> componentScanner.scan(SPRING_BEAN_BASE_PACKAGE);</span><br><span class="line">        log.info(<span class="string">&quot;springBeanScanner扫描的数量 [&#123;&#125;]&quot;</span>, springBeanAmount);</span><br><span class="line">        <span class="comment">//扫描 RpcService 注解</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rpcServiceCount</span> <span class="operator">=</span> rpcServiceScanner.scan(rpcScanBasePackages);</span><br><span class="line">        log.info(<span class="string">&quot;rpcServiceScanner扫描的数量 [&#123;&#125;]&quot;</span>, rpcServiceCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而标注了@Reference的服务消费者，其属性将会被替代为代理类，通过动态代理屏蔽了消息发送的细节，使客户端专心实现自己的业务，而无需关心底层如何实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class RpcClientAutoConfiguration implements BeanPostProcessor &#123;</span><br><span class="line">    private static NettyRpcClient client;</span><br><span class="line">    private volatile boolean needInitClient = false;</span><br><span class="line">    private volatile boolean hasInitClientConfig = false;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        final Class&lt;?&gt; targetClass = bean.getClass();</span><br><span class="line">        final Field[] declaredFields = targetClass.getDeclaredFields();</span><br><span class="line">        for (Field field : declaredFields) &#123;</span><br><span class="line">            if(field.isAnnotationPresent(RpcReference.class))&#123;</span><br><span class="line">                if(!hasInitClientConfig) &#123;</span><br><span class="line">                    //每个Reference对应一个RpcClient</span><br><span class="line">                    client = new NettyRpcClient();</span><br><span class="line">                    hasInitClientConfig = true;</span><br><span class="line">                &#125;</span><br><span class="line">                needInitClient = true;</span><br><span class="line">                final RpcReference annotation = field.getAnnotation(RpcReference.class);</span><br><span class="line">                final RpcServiceConfig rpcServiceConfig = RpcServiceConfig.builder()</span><br><span class="line">                        .group(annotation.group())</span><br><span class="line">                        .version(annotation.version())</span><br><span class="line">                        .build();</span><br><span class="line">                field.setAccessible(true);</span><br><span class="line">                RpcClientProxy rpcClientProxy = new RpcClientProxy(client, rpcServiceConfig);</span><br><span class="line">                try &#123;</span><br><span class="line">                    field.set(bean, rpcClientProxy);</span><br><span class="line">                &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return bean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public class RpcClientProxy implements InvocationHandler &#123;</span><br><span class="line">    private static final String INTERFACE_NAME = &quot;interfaceName&quot;;</span><br><span class="line"></span><br><span class="line">    private final RpcRequestTransport rpcRequestTransport;</span><br><span class="line">    private final RpcServiceConfig rpcServiceConfig;</span><br><span class="line">    //服务发现</span><br><span class="line">    private ServiceDiscovery serviceDiscovery;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public RpcClientProxy(RpcRequestTransport rpcRequestTransport, RpcServiceConfig rpcServiceConfig) &#123;</span><br><span class="line">        this.rpcRequestTransport = rpcRequestTransport;</span><br><span class="line">        this.rpcServiceConfig = rpcServiceConfig;</span><br><span class="line">        serviceDiscovery = new ZkServiceDiscoveryImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public RpcClientProxy(RpcRequestTransport rpcRequestTransport) &#123;</span><br><span class="line">        this.rpcRequestTransport = rpcRequestTransport;</span><br><span class="line">        this.rpcServiceConfig = new RpcServiceConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取代理对象</span><br><span class="line">     * @param clazz 代理类</span><br><span class="line">     * @param &lt;T&gt; 代理类类型</span><br><span class="line">     * @return 代理对象</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; T getProxy(Class&lt;T&gt; clazz)&#123;</span><br><span class="line">        return (T) Proxy.newProxyInstance(clazz.getClassLoader(), new Class&lt;?&gt;[]&#123;clazz&#125;, this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        if(method.getName().equals(&quot;toString&quot;))&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(&quot;开始执行方法: [&#123;&#125;]&quot;, method.getName());</span><br><span class="line">        RpcRequest rpcRequest = RpcRequest.builder()</span><br><span class="line">                .requestId(UUID.randomUUID().toString())</span><br><span class="line">                .parameters(args)</span><br><span class="line">                .methodName(method.getName())</span><br><span class="line">                .interfaceName(method.getDeclaringClass().getName())</span><br><span class="line">                .paramTypes(method.getParameterTypes())</span><br><span class="line">                .group(rpcServiceConfig.getGroup())</span><br><span class="line">                .version(rpcServiceConfig.getVersion())</span><br><span class="line">                .build();</span><br><span class="line">        RpcResponse&lt;Object&gt; rpcResponse = null;</span><br><span class="line">        //通过当前服务对应的唯一channel向服务器发送请求</span><br><span class="line">        if (rpcRequestTransport instanceof NettyRpcClient) &#123;</span><br><span class="line">            CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; completableFuture = (CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt;) rpcRequestTransport.sendRpcRequest(rpcRequest);</span><br><span class="line">            rpcResponse = completableFuture.get();</span><br><span class="line">        &#125;</span><br><span class="line">        if(rpcRequestTransport instanceof SocketRpcClient) &#123;</span><br><span class="line">            rpcResponse = (RpcResponse&lt;Object&gt;) rpcRequestTransport.sendRpcRequest(rpcRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        check(rpcRequest, rpcResponse);</span><br><span class="line">        return rpcResponse.getData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void check(RpcRequest rpcRequest, RpcResponse rpcResponse)&#123;</span><br><span class="line">        if(rpcResponse == null)&#123;</span><br><span class="line">            throw new RpcException(RpcErrorMessageEnum.SERVICE_INVOCATION_FAILURE, INTERFACE_NAME + &quot;:&quot; + rpcRequest.getInterfaceName());</span><br><span class="line">        &#125;</span><br><span class="line">        if(!rpcResponse.getRequestId().equals(rpcRequest.getRequestId()))&#123;</span><br><span class="line">            throw new RpcException(RpcErrorMessageEnum.REQUEST_NOT_MATCH_RESPONSE, INTERFACE_NAME + &quot;:&quot; + rpcRequest.getInterfaceName());</span><br><span class="line">        &#125;</span><br><span class="line">        if(rpcResponse.getCode() == null || !rpcResponse.getCode().equals(RpcResponseCode.SUCCESS.getCode()))&#123;</span><br><span class="line">            throw new RpcException(RpcErrorMessageEnum.SERVICE_INVOCATION_FAILURE, INTERFACE_NAME + &quot;:&quot; + rpcRequest.getInterfaceName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简易RPC框架-服务注册模块&quot;&gt;&lt;a href=&quot;#简易RPC框架-服务注册模块&quot; class=&quot;headerlink&quot; title=&quot;简易RPC框架 - 服务注册模块&quot;&gt;&lt;/a&gt;简易RPC框架 - 服务注册模块&lt;/h3&gt;&lt;h4 id=&quot;1、结构设计&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>简易RPC框架 - 1</title>
    <link href="http://example.com/2023/05/12/rpc-framework-1/"/>
    <id>http://example.com/2023/05/12/rpc-framework-1/</id>
    <published>2023-05-12T05:24:57.000Z</published>
    <updated>2023-05-12T06:21:51.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简易RPC框架-前言"><a href="#简易RPC框架-前言" class="headerlink" title="简易RPC框架 - 前言"></a>简易RPC框架 - 前言</h3><h4 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h4><p>Rpc框架想必大家都不陌生，常见的开源RPC框架如Dubbo、gRpc、Thrift等，为啥想到要手动实现一个Rpc框架，主要是本人对网络编程很感兴趣，想通过这个来加强自己对Java以及网络编程的理解，也能体验一下钻研的快乐。</p><h4 id="2、基础设计"><a href="#2、基础设计" class="headerlink" title="2、基础设计"></a>2、基础设计</h4><p>这个Rpc框架的最初设计大概如下图：</p><p><img src="/2023/05/12/rpc-framework-1/image-20230512133521798.png" alt="image-20230512133521798"></p><p>最初是尝试通过NIO去实现的，每个服务对应一个Client，即每个服务绑定一个Channel，然后通过Selector轮巡监听服务端的消息。服务端再这里扮演的是一个消息中转站的角色。显而易见的，这个设计存在着一个致命的问题，服务端怎么去分辨Selector上的每个通道对应的是哪个服务，查了很多资料都没有较好的办法，这个方案就不了了之了。</p><p>虽然这个方案行不通，但我还是抱着试试的心态去写了，不过我把服务通信的方式由NIO换成了效率更好的Netty，框架的设计参考了很多资料，包括掘金里DannyIdea（小林）的<a href="https://juejin.cn/book/7047357110337667076/section">Java开发者的RPC实战课</a>、Dubbo的基本架构图。</p><p><img src="/2023/05/12/rpc-framework-1/u=341734470,1171504543&fm=253&fmt=auto&app=138&f=JPEG.jpg" alt="u=341734470,1171504543&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG"></p><p>现在的通信方式依然是之前的，目前还在慢慢的重构，但大体的框架结构分别由 服务注册、服务发现、负载均衡、服务提供 等模块组成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简易RPC框架-前言&quot;&gt;&lt;a href=&quot;#简易RPC框架-前言&quot; class=&quot;headerlink&quot; title=&quot;简易RPC框架 - 前言&quot;&gt;&lt;/a&gt;简易RPC框架 - 前言&lt;/h3&gt;&lt;h4 id=&quot;1、前言&quot;&gt;&lt;a href=&quot;#1、前言&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring本地事务失效问题</title>
    <link href="http://example.com/2023/01/14/local-transaction-logs/"/>
    <id>http://example.com/2023/01/14/local-transaction-logs/</id>
    <published>2023-01-14T13:01:16.000Z</published>
    <updated>2023-01-14T13:01:55.734Z</updated>
    
    <content type="html"><![CDATA[<p>​        在SpringBoot框架中，当我们需要用到事务时，一般直接在方法上标注@Transactional，这样当方法内发生异常时，整个方法都会回滚。但Spring的事务存在一个问题，假设存在这么一个场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(timeout = 30)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        b();</span><br><span class="line">        c();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED, timeout = 10)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW, timeout = 10)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">c</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        在spring中，事务的默认传播模式是propagation = Propagation.REQUIRED，即当b()方法需要一个事务，a()方法的事务会默认传递给b()方法，那么当a()方法中任何一处抛出异常，都会连同b()方法一起回滚。但存在的问题是。此时在b()方法中不论对事务做了什么设置，都是无效的，因为用的是a()方法的事务。再看c()方法，声明了propagation = Propagation.REQUIRES_NEW，即使用一个新事务，这样虽然配置能生效，但当a()方法抛出异常时，c()方法不会跟着一起回滚，显然达不到业务需求。</p><p>​        造成上面的原因是，同一个对象内的事务方法互相调用，绕过了代理对象。因为spring中的事务是通过代理对象实现的，那么能不能这样实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional(timeout = 30)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        service.b();</span><br><span class="line">        service.c();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED, timeout = 10)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED, timeout = 10)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">c</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样通过代理对象调用方法，虽然配置会生效，但这会出现循环依赖问题，显然也不行。</p><p>正确的解决方法是使用代理对象来解决：</p><ol><li><p>引入aop</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>在启动类标注@EnableAspectJAutoProxy(exposeProxy = true)</p><p>spring aop中有两种代理模式，一种是jdk动态代理，另外一种是cglib代理。</p><p>​        jdk动态代理是<code>JDK</code>原生的，不需要任何依赖即可使用，缺点是如果要使用<code>JDK</code>动态代理，被代理的类必须实现了接口，否则无法代理；<code>JDK</code>动态代理无法为没有在接口中定义的方法实现代理，假设我们有一个实现了接口的类，我们为它的一个不属于接口中的方法配置了切面，<code>Spring</code>仍然会使用<code>JDK</code>的动态代理，但是由于配置了切面的方法不属于接口，为这个方法配置的切面将不会被织入。<code>JDK</code>动态代理执行代理方法时，需要通过反射机制进行回调，此时方法执行的效率比较低。</p><p>​        cglib代理的优点是，使用<code>CGLib</code>代理的类，不需要实现接口，因为<code>CGLib</code>生成的代理类是直接继承自需要被代理的类；<code>CGLib</code>生成的代理类是原来那个类的子类，这就意味着这个代理类可以为原来那个类中，所有能够被子类重写的方法进行代理；<code>CGLib</code>生成的代理类，和我们自己编写并编译的类没有太大区别，对方法的调用和直接调用普通类的方式一致，所以<code>CGLib</code>执行代理方法的效率要高于<code>JDK</code>的动态代理。</p><p>​        在这里我们使用cglib代理，并配置对外暴露代理对象</p></li></ol><p>做好这些配置后，回到我们最初的场景，这时候我们可以这样做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Service&#123;</span><br><span class="line">@Transactional(timeout = 30)</span><br><span class="line">    public void a()&#123;</span><br><span class="line">    //拿到当前类的代理对象</span><br><span class="line">    Service service = (Service)AopContext.currentProxy();</span><br><span class="line">        service.b();</span><br><span class="line">        service.c();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED, timeout = 10)</span><br><span class="line">    public void b()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Transactional(propagation = Propagation.REQUIRED, timeout = 10)</span><br><span class="line">    public void c()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        在SpringBoot框架中，当我们需要用到事务时，一般直接在方法上标注@Transactional，这样当方法内发生异常时，整个方法都会回滚。但Spring的事务存在一个问题，假设存在这么一个场景：&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Feign远程调用遇到的坑</title>
    <link href="http://example.com/2023/01/14/feign-logs/"/>
    <id>http://example.com/2023/01/14/feign-logs/</id>
    <published>2023-01-14T12:58:07.000Z</published>
    <updated>2023-01-14T13:02:00.362Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、Feign远程调用丢失请求头问题"><a href="#1、Feign远程调用丢失请求头问题" class="headerlink" title="1、Feign远程调用丢失请求头问题"></a>1、Feign远程调用丢失请求头问题</h4><p>​    在订单服务向购物车服务发起远程调用时，在购物车服务中获取不到用户信息，原因是用户的信息是基于SpringSession保存在redis中，key存在于浏览器的cookie中，当在浏览器中发起请求时，由于请求会默认带上cookie，所以可以正常获取到数据信息，但在这个业务中是由Feign发起的远程调用走到购物车服务，Feign远程调用时会创建一个新的request，里面没有cookie数据，所以在购物车服务中获取不到用户数据。</p><p>​    解决办法，由于Feign在远程调用之前都会调用很多拦截器(默认没有拦截器)，可以写一个Feign的请求拦截器扩展Feign的功能，在新的request中加入cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestInterceptor <span class="title function_">requestInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestInterceptor</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate template)</span> &#123;</span><br><span class="line">                <span class="comment">//通过上下文环境保持器拿到当前请求的所有属性RequestAttributes -&gt;</span></span><br><span class="line"><span class="comment">//                RequestAttributes attributes = RequestContextHolder.getRequestAttributes();</span></span><br><span class="line">                <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line">                <span class="comment">//同步请求头数据</span></span><br><span class="line">                template.header(<span class="string">&quot;Cookie&quot;</span>, request.getHeader(<span class="string">&quot;Cookie&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、Feign异步情况丢失上下文问题"><a href="#2、Feign异步情况丢失上下文问题" class="headerlink" title="2、Feign异步情况丢失上下文问题"></a>2、Feign异步情况丢失上下文问题</h4><p>​    在上一个问题中，对于Feign的远程调用请求头丢失问题，引入了RequestInterceptor来解决，但这种办法只能针对同步问题，当使用异步编排发起Feign远程调用时，ServletRequestAttributes中就回去不到原来线程的request数据，就会报空指针异常。</p><p><img src="/2023/01/14/feign-logs/image-20230108205538489.png" alt="image-20230108205538489"></p><p>​    如上图所示，RequestContextHolder是利用ThreadLocal共享数据，所以会发生这种问题。</p><p>​    解决办法是在异步编排之前，先获取主线程的上下文，在进入新线程后再把主线程的上下文放到新线程里面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、Feign远程调用丢失请求头问题&quot;&gt;&lt;a href=&quot;#1、Feign远程调用丢失请求头问题&quot; class=&quot;headerlink&quot; title=&quot;1、Feign远程调用丢失请求头问题&quot;&gt;&lt;/a&gt;1、Feign远程调用丢失请求头问题&lt;/h4&gt;&lt;p&gt;​    在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>frp内网穿透</title>
    <link href="http://example.com/2023/01/14/frp/"/>
    <id>http://example.com/2023/01/14/frp/</id>
    <published>2023-01-14T12:54:16.000Z</published>
    <updated>2023-01-14T13:02:04.947Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><p>​    简单介绍一下，frp主要有两个部分，客户端(frpc)和服务端(frps)，服务端需要部署在具有公网ip的机器上（也就是我们自己买的云服务器），客户端就是我们需要进行穿透的电脑（本地机器）。</p><h4 id="二、服务端配置"><a href="#二、服务端配置" class="headerlink" title="二、服务端配置"></a>二、服务端配置</h4><p>​    首先需要在服务端下载frp并解压。输入命令<code>arch</code>查看处理器架构，根据此去github下载对应的frp版本，然后下载解压完就行。</p><p>​    这里我们只需要修改frps.ini文件的配置就可以了，其他与frpc相关的文件都可删去。由于只需要进行Web服务的穿透访问，这里只配置Web，其他配置按需百度添加即可，重点是成功搭建并运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">#frp监听的端口，即与本地机器建立通信的端口，默认是7000，可以改成其他的（不建议动）</span><br><span class="line">bind_port = 7000</span><br><span class="line">#该端口就是以后访问web服务需要用到的端口，可自定义</span><br><span class="line">vhost_http_port = 3000</span><br><span class="line">#授权码，建议不要太简单。这个token之后在客户端会用到</span><br><span class="line">#注意:不要再token后面加#注释进行注释，也会被算上token内容，导致认证失败!写注释最好单独一行</span><br><span class="line">token = 123456</span><br><span class="line"></span><br><span class="line">#frp管理后台端口,请按自己需求更改，这个东西并不是一定要，这里还是提一下</span><br><span class="line">dashboard_ _port = 7508</span><br><span class="line">#frp管理后台用户名和密码,请改成自己的</span><br><span class="line">dashboard_user =</span><br><span class="line">dashboard_pwd =</span><br><span class="line">enable_prometheus = true</span><br></pre></td></tr></table></figure><p>配置好后就可以启动了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frps -c ./frps.ini &amp;</span><br></pre></td></tr></table></figure><p>这里可以用systemctl执行，附上配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frps daemon</span><br><span class="line">After=syslog.target  network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/local/frp/frps -c /usr/local/frp/frps.ini</span><br><span class="line">Restart= always</span><br><span class="line">RestartSec=1min</span><br><span class="line">ExecStop=/usr/bin/killall frps</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="三、客户端配置"><a href="#三、客户端配置" class="headerlink" title="三、客户端配置"></a>三、客户端配置</h4><p>​    和服务端一样，下载解压。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">#服务器的ip地址</span><br><span class="line">server_addr =</span><br><span class="line">#服务器监听的端口，即frps.ini里的bind_port</span><br><span class="line">server_port = 7000</span><br><span class="line">#授权码</span><br><span class="line">token =</span><br><span class="line"></span><br><span class="line">#配置http服务，可用于第三方接口（java开发、小程序开发等）等远程调试</span><br><span class="line">[web]</span><br><span class="line">#服务类型</span><br><span class="line">type = http</span><br><span class="line">#需要被穿透的本地ip，不用改，相当于localhost</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">#本地项目运行服务提供的端口，根据项目自定义</span><br><span class="line">local_port = 3000</span><br><span class="line">#web域名</span><br><span class="line">custom_domains =</span><br><span class="line">#远程服务器监听web服务的端口，需要即frps.ini里的vhost_http_port</span><br><span class="line">remote_port = 3000</span><br></pre></td></tr></table></figure><p>客户端的话，以windows系统为例，在cmd终端cd进frp目录，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\frpc.exe -c frpc.ini</span><br></pre></td></tr></table></figure><p>也可以将执行命令打成bat脚本，这里也附上代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">if &quot;%1&quot; == &quot;h&quot; goto begin</span><br><span class="line">mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;%~nx0&quot;&quot; h&quot;,0)(window.close)&amp;&amp;exit</span><br><span class="line">:begin</span><br><span class="line">REM</span><br><span class="line">D:</span><br><span class="line">cd Tools\frp</span><br><span class="line">.\frpc.exe -c frpc.ini</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h4&gt;&lt;p&gt;​    简单介绍一下，frp主要有两个部分，客户端(frpc)和服务端(frps)，服务端需要部署在具有公网ip的机器上（</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建redis哨兵集群</title>
    <link href="http://example.com/2022/11/05/sentinel-colony/"/>
    <id>http://example.com/2022/11/05/sentinel-colony/</id>
    <published>2022-11-05T09:06:28.000Z</published>
    <updated>2022-11-05T11:28:46.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建哨兵集群"><a href="#搭建哨兵集群" class="headerlink" title="搭建哨兵集群"></a>搭建哨兵集群</h1><h2 id="1-集群结构"><a href="#1-集群结构" class="headerlink" title="1.集群结构"></a>1.集群结构</h2><p>Redis提供了哨兵（Sentinel）机制来实现主从集群的自动故障恢复。哨兵的结构和作用如下：</p><h4 id="1-1哨兵的作用"><a href="#1-1哨兵的作用" class="headerlink" title="1.1哨兵的作用"></a>1.1哨兵的作用</h4><ul><li><p><strong>监控</strong>：Sentinel 会不断检查您的master和slave是否按预期工作</p></li><li><p><strong>自动故障恢复</strong>：如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主</p></li><li><p><strong>通知</strong>：Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端</p></li></ul><h4 id="1-2服务状态监控"><a href="#1-2服务状态监控" class="headerlink" title="1.2服务状态监控"></a>1.2服务状态监控</h4><p>Sentinel基于心跳机制监测服务状态，每隔1秒向集群的每个实例发送ping命令：</p><ul><li>主观下线：如果某sentinel节点发现某实例未在规定时间响应，则认为该实例<strong>主观下线</strong>。</li><li>客观下线：若超过指定数量（quorum）的sentinel都认为该实例主观下线，则该实例<strong>客观下线</strong>。quorum值最好超过Sentinel实例数量的一半。</li></ul><h4 id="1-3选举新的master"><a href="#1-3选举新的master" class="headerlink" title="1.3选举新的master"></a>1.3选举新的master</h4><p>一旦发现master故障，sentinel需要在salve中选择一个作为新的master，选择依据是这样的：</p><ul><li>首先会判断slave节点与master节点断开时间长短，如果超过指定值（down-after-milliseconds * 10）则会排除该slave节点</li><li>然后判断slave节点的slave-priority值，越小优先级越高，如果是0则永不参与选举</li><li>如果slave-prority一样，则判断slave节点的offset值，越大说明数据越新，优先级越高</li><li>最后是判断slave节点的运行id大小，越小优先级越高。</li></ul><h4 id="1-2如何实现故障转移"><a href="#1-2如何实现故障转移" class="headerlink" title="1.2如何实现故障转移"></a>1.2如何实现故障转移</h4><ul><li>sentinel给备选的slave1节点发送slaveof no one命令，让该节点成为master</li><li>sentinel给所有其它slave发送slaveof 192.168.237.131 7002 命令，让这些slave成为新master的从节点，开始从新的master上同步数据。</li><li>最后，sentinel将故障节点标记为slave，当故障节点恢复后会自动成为新的master的slave节点</li></ul><p>这里我们搭建一个三节点形成的Sentinel集群，来监管之前的Redis主从集群。如图：</p><p><img src="/2022/11/05/sentinel-colony/image-20210701215227018.png" alt="image-20210701215227018"></p><p>三个sentinel实例信息如下：</p><table><thead><tr><th>节点</th><th align="center">IP</th><th align="center">PORT</th></tr></thead><tbody><tr><td>s1</td><td align="center">192.168.237.131</td><td align="center">27001</td></tr><tr><td>s2</td><td align="center">192.168.237.131</td><td align="center">27002</td></tr><tr><td>s3</td><td align="center">192.168.237.131</td><td align="center">27003</td></tr></tbody></table><h2 id="2-准备实例和配置"><a href="#2-准备实例和配置" class="headerlink" title="2.准备实例和配置"></a>2.准备实例和配置</h2><p>要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。</p><p>我们创建三个文件夹，名字分别叫s1、s2、s3：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在usr/local/redis-colony文件夹内创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> s1 s2 s3</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/2022/11/05/sentinel-colony/image-20221105170909619.png" alt="image-20221105170909619"></p><p>然后我们在s1目录创建一个sentinel.conf文件，添加下面的内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">port 27001</span><br><span class="line">sentinel announce-ip 192.168.237.131</span><br><span class="line">sentinel monitor mymaster 192.168.237.131 7001 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br><span class="line">sentinel failover-timeout mymaster 60000</span><br><span class="line">dir &quot;/usr/local/redis-colony/s1&quot;</span><br></pre></td></tr></table></figure><p>解读：</p><ul><li><code>port 27001</code>：是当前sentinel实例的端口</li><li><code>sentinel monitor mymaster 192.168.237.131 7001 2</code>：指定主节点信息<ul><li><code>mymaster</code>：主节点名称，自定义，任意写</li><li><code>192.168.237.131 7001</code>：主节点的ip和端口</li><li><code>2</code>：选举master时的quorum值，此时配了3台sentinel，有两台以上就认为挂了</li></ul></li></ul><p>然后将s1/sentinel.conf文件拷贝到s2、s3两个目录中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：逐个拷贝</span></span><br><span class="line"><span class="built_in">cp</span> s1/sentinel.conf s2</span><br><span class="line"><span class="built_in">cp</span> s1/sentinel.conf s3</span><br><span class="line"><span class="comment"># 方式二：管道组合命令，一键拷贝</span></span><br><span class="line"><span class="built_in">echo</span> s2 s3 | xargs -t -n 1 <span class="built_in">cp</span> s1/sentinel.conf</span><br></pre></td></tr></table></figure><p>修改s2、s3两个文件夹内的配置文件，将端口分别修改为27002、27003：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s/27001/27002/g&#x27;</span> -e <span class="string">&#x27;s/s1/s2/g&#x27;</span> s2/sentinel.conf</span><br><span class="line">sed -i -e <span class="string">&#x27;s/27001/27003/g&#x27;</span> -e <span class="string">&#x27;s/s1/s3/g&#x27;</span> s3/sentinel.conf</span><br></pre></td></tr></table></figure><h2 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h2><p>先启动redis主从集群</p><p>7002</p><p><img src="/2022/11/05/sentinel-colony/image-20221105190006728.png" alt="image-20221105190006728"></p><p>7003</p><p><img src="/2022/11/05/sentinel-colony/image-20221105190038169.png" alt="image-20221105190038169"></p><p>为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel s1/sentinel.conf</span><br><span class="line">redis-sentinel s2/sentinel.conf</span><br><span class="line">redis-sentinel s3/sentinel.conf</span><br></pre></td></tr></table></figure><p>启动后：</p><p><img src="/2022/11/05/sentinel-colony/image-20221105181013812.png" alt="image-20221105181013812"></p><p><img src="/2022/11/05/sentinel-colony/image-20221105181040781.png" alt="image-20221105181040781"></p><p><img src="/2022/11/05/sentinel-colony/image-20221105181059522.png" alt="image-20221105181059522"></p><h2 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4.测试"></a>3.4.测试</h2><p>尝试让master节点7001宕机</p><p><img src="/2022/11/05/sentinel-colony/image-20221105181244740.png" alt="image-20221105181244740"></p><p>查看sentinel27002的日志：</p><p><img src="/2022/11/05/sentinel-colony/image-20221105190717411.png" alt="image-20221105190717411"></p><ol><li>第一行，+sdown，sentinel主观认为7001下线</li><li>第三行，+vote-for-leader，sentinel选出一个leader，选出的sentinel实例去执行故障切换</li><li>第四行，+odown，quorum达标，sentinel客观认为7001下线</li><li>第七行，+switch-master，选7003为新的master</li></ol><p>查看27003的日志：</p><p><img src="/2022/11/05/sentinel-colony/image-20221105190809034.png" alt="image-20221105190809034"></p><p>查看7002的日志：</p><p><img src="/2022/11/05/sentinel-colony/image-20221105190856348.png" alt="image-20221105190856348"></p><ol><li>第一行，7002与其主机7001之间的连接断开</li><li>第三行，由于sentinel实例执行了故障切换，把7003选举为新的master，所以自动更改7002的配置</li><li>第四行，Connecting to master 192.168.237.131:7003 建立7002与其新master7003之间的连接</li><li>第八行，Trying a partial…，重新执行数据同步psync</li></ol><p>查看7003的日志</p><p><img src="/2022/11/05/sentinel-colony/image-20221105190927905.png" alt="image-20221105190927905"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搭建哨兵集群&quot;&gt;&lt;a href=&quot;#搭建哨兵集群&quot; class=&quot;headerlink&quot; title=&quot;搭建哨兵集群&quot;&gt;&lt;/a&gt;搭建哨兵集群&lt;/h1&gt;&lt;h2 id=&quot;1-集群结构&quot;&gt;&lt;a href=&quot;#1-集群结构&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建redis主从集群</title>
    <link href="http://example.com/2022/11/05/redis-colony/"/>
    <id>http://example.com/2022/11/05/redis-colony/</id>
    <published>2022-11-05T08:00:08.000Z</published>
    <updated>2022-11-05T09:03:44.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis主从集群"><a href="#Redis主从集群" class="headerlink" title="Redis主从集群"></a>Redis主从集群</h1><h2 id="1-集群结构"><a href="#1-集群结构" class="headerlink" title="1.集群结构"></a>1.集群结构</h2><p>我们搭建的主从集群结构如图：</p><p><img src="/2022/11/05/redis-colony/image-20210630111505799.png" alt="image-20210630111505799"></p><p>共包含三个节点，一个主节点，两个从节点。</p><p>这里我们会在同一台虚拟机中开启3个redis实例，模拟主从集群，信息如下：</p><table><thead><tr><th align="center">IP</th><th align="center">PORT</th><th align="center">角色</th></tr></thead><tbody><tr><td align="center">192.168.237.101</td><td align="center">7001</td><td align="center">master</td></tr><tr><td align="center">192.168.237.101</td><td align="center">7002</td><td align="center">slave</td></tr><tr><td align="center">192.168.237.101</td><td align="center">7003</td><td align="center">slave</td></tr></tbody></table><h2 id="2-准备实例和配置"><a href="#2-准备实例和配置" class="headerlink" title="2.准备实例和配置"></a>2.准备实例和配置</h2><p>要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。</p><p>1）创建目录</p><p>我们创建三个文件夹，名字分别叫7001、7002、7003：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在usr/local/redis-colony文件夹内创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> 7001 7002 7003</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/2022/11/05/redis-colony/image-20221105162330778.png" alt="image-20221105162330778"></p><p>2）恢复原始配置</p><p>修改redis-5.0.5/redis.conf文件，将其中的持久化模式改为默认的RDB模式，AOF保持关闭状态。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启RDB</span></span><br><span class="line"><span class="comment"># save &quot;&quot;</span></span><br><span class="line"><span class="attr">save</span> <span class="string">3600 1</span></span><br><span class="line"><span class="attr">save</span> <span class="string">300 100</span></span><br><span class="line"><span class="attr">save</span> <span class="string">60 10000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 关闭AOF</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">no</span></span><br></pre></td></tr></table></figure><p>3）拷贝配置文件到每个实例目录</p><p>然后将redis-5.0.5/redis.conf文件拷贝到三个目录中（在/redis-colony目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：逐个拷贝</span></span><br><span class="line"><span class="built_in">cp</span> redis-5.0.5/redis.conf 7001</span><br><span class="line"><span class="built_in">cp</span> redis-5.0.5/redis.conf 7002</span><br><span class="line"><span class="built_in">cp</span> redis-5.0.5/redis.conf 7003</span><br><span class="line"><span class="comment"># 方式二：管道组合命令，一键拷贝</span></span><br><span class="line"><span class="built_in">echo</span> 7001 7002 7003 | xargs -t -n 1 ../redis-5.0.5/redis.conf</span><br></pre></td></tr></table></figure><p>4）修改每个实例的端口、工作目录</p><p>修改每个文件夹内的配置文件，将端口分别修改为7001、7002、7003，将rdb文件保存位置都修改为自己所在目录（在/redis-colony目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s/6379/7001/g&#x27;</span> -e <span class="string">&#x27;s/dir .\//dir \/usr\/local\/redis-colony\/7001\//g&#x27;</span> 7001/redis.conf</span><br><span class="line">sed -i -e <span class="string">&#x27;s/6379/7002/g&#x27;</span> -e <span class="string">&#x27;s/dir .\//dir \/usr\/local\/redis-colony\/7002\//g&#x27;</span> 7002/redis.conf</span><br><span class="line">sed -i -e <span class="string">&#x27;s/6379/7003/g&#x27;</span> -e <span class="string">&#x27;s/dir .\//dir \/usr\/local\/redis-colony\/7003\//g&#x27;</span> 7003/redis.conf</span><br></pre></td></tr></table></figure><p>5）修改每个实例的声明IP</p><p>虚拟机本身有多个IP，为了避免将来混乱，我们需要在redis.conf文件中指定每一个实例的绑定ip信息，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># redis实例的声明 IP</span><br><span class="line">replica-announce-ip 192.168.237.131</span><br></pre></td></tr></table></figure><p>每个目录都要改，我们一键完成修改（在/redis-colony目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逐一执行</span></span><br><span class="line">sed -i <span class="string">&#x27;1a replica-announce-ip 192.168.237.131&#x27;</span> 7001/redis.conf</span><br><span class="line">sed -i <span class="string">&#x27;1a replica-announce-ip 192.168.237.131&#x27;</span> 7002/redis.conf</span><br><span class="line">sed -i <span class="string">&#x27;1a replica-announce-ip 192.168.237.131&#x27;</span> 7003/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者一键修改</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;%s\n&#x27;</span> 7001 7002 7003 | xargs -I&#123;&#125; -t sed -i <span class="string">&#x27;1a replica-announce-ip 192.168.237.131&#x27;</span> &#123;&#125;/redis.conf</span><br></pre></td></tr></table></figure><h2 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h2><p>为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-server 7001/redis.conf</span><br><span class="line">redis-server 7002/redis.conf</span><br><span class="line">redis-server 7003/redis.conf</span><br></pre></td></tr></table></figure><p>启动后：</p><p><img src="/2022/11/05/redis-colony/image-20221105163747112.png" alt="image-20221105163747112"></p><p>如果要一键停止，可以运行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;%s\n&#x27;</span> 7001 7002 7003 | xargs -I&#123;&#125; -t redis-cli -p &#123;&#125; shutdown</span><br></pre></td></tr></table></figure><h2 id="4-开启主从关系"><a href="#4-开启主从关系" class="headerlink" title="4.开启主从关系"></a>4.开启主从关系</h2><p>现在三个实例还没有任何关系，要配置主从可以使用replicaof 或者slaveof（5.0以前）命令。</p><p>有临时和永久两种模式：</p><ul><li><p>修改配置文件（永久生效）</p><ul><li>在redis.conf中添加一行配置：<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></li></ul></li><li><p>使用redis-cli客户端连接到redis服务，执行slaveof命令（重启后失效）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line">slaveof 192.168.237.131 7001</span><br></pre></td></tr></table></figure></li></ul><p><strong><font color="red">注意</font></strong>：在5.0以后新增命令replicaof，与salveof效果一致。</p><p>这里我们为了演示方便，使用方式二。</p><p>通过redis-cli命令连接7002，执行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接 7002</span></span><br><span class="line">redis-cli -p 7002</span><br><span class="line"><span class="comment"># 执行slaveof</span></span><br><span class="line">slaveof 192.168.237.131 7001</span><br></pre></td></tr></table></figure><p>通过redis-cli命令连接7003，执行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接 7003</span></span><br><span class="line">redis-cli -p 7003</span><br><span class="line"><span class="comment"># 执行slaveof</span></span><br><span class="line">slaveof 192.168.237.131 7001</span><br></pre></td></tr></table></figure><p>然后连接 7001节点，查看集群状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接 7001</span></span><br><span class="line">redis-cli -p 7001</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2022/11/05/redis-colony/image-20221105165646834.png" alt="image-20221105165646834"></p><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><p>执行下列操作以测试：</p><ul><li><p>利用redis-cli连接7001，执行<code>set num 100 </code></p><p><img src="/2022/11/05/redis-colony/image-20221105165820844.png" alt="image-20221105165820844"></p></li><li><p>利用redis-cli连接7002，执行<code>get num</code>，再执行<code>set num 666</code></p><p><img src="/2022/11/05/redis-colony/image-20221105165907462.png" alt="image-20221105165907462"></p></li></ul><p>可以发现，只有在7001这个master节点上可以执行写操作，而slave节点只能执行读操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis主从集群&quot;&gt;&lt;a href=&quot;#Redis主从集群&quot; class=&quot;headerlink&quot; title=&quot;Redis主从集群&quot;&gt;&lt;/a&gt;Redis主从集群&lt;/h1&gt;&lt;h2 id=&quot;1-集群结构&quot;&gt;&lt;a href=&quot;#1-集群结构&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>著名的三色标记法</title>
    <link href="http://example.com/2022/10/17/Tri-colour-marking/"/>
    <id>http://example.com/2022/10/17/Tri-colour-marking/</id>
    <published>2022-10-17T12:44:16.000Z</published>
    <updated>2022-10-17T13:57:38.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>当前主流编程语言的垃圾收集器基本上都是依靠可达性分析算法来判定对象是否存活的，可达性分析算法理论上要求全过程都基于一个能保障一致性的快照中才能够进行分析，这意味着必须全程冻结用户线程的运行（STW）。</p><p>在根节点枚举这个步骤中，由于GC Roots相比起整个Java堆中全部的对象毕竟还算是极少数，且在各种优化技巧（如OopMap）的加持下，它带来的停顿已经是非常短暂且相对固定（不随堆容量而增长）的了。可从GC Roots再继续往下遍历对象图，这一步骤的停顿时间就必定会与Java堆容量直接成正比例关系了：堆越大，存储的对象越多，对象图结构越复杂，要标记更多对象而产生的停顿时间自然就更长。包含“标记”阶段是所有追踪式垃圾收集算法的共同特征，如果这个阶段会随着堆变大而等比例增加停顿时间，其影响就会波及几乎所有的垃圾收集器，同理可知，如果能够削减这部分停顿时间的话，那收益也将会是系统性的。</p><h2 id="二、三色标记法"><a href="#二、三色标记法" class="headerlink" title="二、三色标记法"></a>二、三色标记法</h2><p>顾名思义，用三种颜色进行标记，其用在CMS垃圾回收器工作的并发标记阶段。</p><hr><ul><li>白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达(白色对象会被当成垃圾对象)。</li></ul><ul><li>黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用（子对象）都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象(黑色对象不会当成垃圾对象)。</li></ul><ul><li>灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过，可以理解为正在搜索的对象。当垃圾回收线程从暂停中再次回来，不会扫描灰色对象，而是直接扫描灰色对象的引用。</li></ul><p>简述三色标记法的遍历过程：</p><ol><li><p>初始时，全部对象都是白色的</p></li><li><p>GC Roots直接引用的对象变成灰色</p></li><li><p>从灰色集合中获取元素：</p><p>3.1 将本对象直接引用的对象标记为灰色</p><p>3.2 将本对象标记为黑色</p></li><li><p>重复步骤3，直到灰色的对象集合变为空</p></li><li><p>结束后，仍然被标记为白色的对象就是不可达对象，视为垃圾对象</p></li></ol><p>当Stop The Word时，对象间的引用是不会发生变化的，因为用户线程中断了，可以轻松完成标记，但是在并发标记的时候，标记期间用户线程还在跑，对象间的引用可能发生变化，多标和漏标的情况就可能会发生</p><p><strong>多标(又叫浮动垃圾)</strong></p><p>假设此时我们遍历到了D对象，此时D被标记成了灰色</p><p><img src="/2022/10/17/Tri-colour-marking/img1.png" alt="img1"></p><p> 此时线程发生B取消了对D的引用</p><p><img src="/2022/10/17/Tri-colour-marking/img4.png" alt="img4"></p><p>这时候B-&gt;D的引用没了，D应该是白色，但是因为先前D已经被标记成灰色了，所以D对象仍然会被当成存活对象遍历下去。最终结果：这部分对象仍然会被标记为存活对象，本轮GC不会回收他们的内存。这部分因为并发而造成的本应该回收但是没有回收的对象被称为”浮动垃圾”，我们稍微一想也能想到，<strong>浮动垃圾不会影响应用程序的正确性，只需要等到下一轮GC到来就会被回收了</strong>。</p><p>另外的，针对并发标记开始后产生的新对象，通常做法是直接标记为黑色，本轮不进行清除，这些对象即使会变成垃圾对象，这也算浮动垃圾一部分。</p><p>另外的，针对并发标记开始后产生的新对象，通常做法是直接标记为黑色，本轮不进行清除，这些对象即使会变成垃圾对象，这也算浮动垃圾一部分。</p><p><strong>漏标(读写屏障)</strong></p><p>假设GC线程已经遍历到D对象，此时D被标记为灰色 </p><p><img src="/2022/10/17/Tri-colour-marking/img2.png" alt="img2"></p><p>但是此时有代码执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">E</span> <span class="operator">=</span> D.next;</span><br><span class="line">D.next = <span class="literal">null</span>;</span><br><span class="line">B.next = E;</span><br></pre></td></tr></table></figure><p><img src="/2022/10/17/Tri-colour-marking/img3.png" alt="img3"></p><p>此时D到E的引用消失，B生成了对E的引用。当GC线程继续时，因为D已经没有了对E的引用，所以不会遍历到E，E也就不会标志为灰色，同时B已经标志为黑色了，不会再被遍历，那么也就导致E一直是白色的，最后被当成垃圾处理，这显然与事实不符，E是可打的，但是因为并发的影响漏标了E，使得E被垃圾回收，明显影响了应用程序的正确性，这是不可接受的。</p><p>分析一下，漏标只有同时满足以下两个条件时才会发生：</p><ol><li><p>灰色对象断开了白色对象的引用</p></li><li><p>黑色对象重新引用了该白色对象</p></li></ol><p>从代码角度看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">E</span> <span class="operator">=</span> D.next;</span><br><span class="line">D.next = <span class="literal">null</span>;</span><br><span class="line">B.next = E;</span><br></pre></td></tr></table></figure><p>只要在上面三步中修改任意一步就可以将丢失的E记录下来，然后当作灰色对象继续遍历</p><p>根据以上思路有两种解决办法：</p><h5 id="一、写屏障-阻止第二步和第三步"><a href="#一、写屏障-阻止第二步和第三步" class="headerlink" title="一、写屏障(阻止第二步和第三步)"></a>一、写屏障(阻止第二步和第三步)</h5><p>1.写屏障 + SATB</p><p>当对象D的引用发生变化时，利用写屏障，将D原来的引用对象记录下来，这样可以尝试保留开始时的对象图，保证标记依然按照原本的路线走</p><p>2.写屏障 + 增量更新</p><p>当对象B的引用发生变化时，利用写屏障，将B新的引用对象E记录下来</p><p>即当有新的引用插入进来时，记录下新的引用</p><p>这种思路不要求保留原始对象图，而是针对新的引用记录下来等待遍历即增量更新</p><h5 id="二、读屏障-阻止第一步"><a href="#二、读屏障-阻止第一步" class="headerlink" title="二、读屏障(阻止第一步)"></a>二、读屏障(阻止第一步)</h5><p>读屏障针对第一步，当读取引用对象的时候，一律记录下来，显然这种方法非常保守，但是安全。</p><p>将记录下的引用遍历就是了</p><p>在现代的垃圾回收器当中可达性分析算法的垃圾回收器几乎都借鉴了三色标记法的思想。</p><p>在Java HotSpot VM中</p><p>CMS采用的是：写屏障 + 增量更新</p><p>G1采用的是：写屏障 + SATB</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;当前主流编程语言的垃圾收集器基本上都是依靠可达性分析算法来判定对象是否存活的，可达性分析算法理论上要求全过程都基于一个能保障</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常用的垃圾回收算法和垃圾回收器</title>
    <link href="http://example.com/2022/10/17/GC/"/>
    <id>http://example.com/2022/10/17/GC/</id>
    <published>2022-10-17T10:07:37.000Z</published>
    <updated>2022-10-17T13:03:27.657Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><p>​        相对于c/c++，java、python等高级语言引进了Garbage Collector（GC）垃圾回收器，能实现内存垃圾的自动回收，虽然牺牲了一定的运行效率，但大大地提高了开发效率，那么问题来了，常用的GC都有哪些？常用的GC算法都有哪些？GC是如何定义和定位垃圾的呢？</p><h4 id="二、What-is-Garbage"><a href="#二、What-is-Garbage" class="headerlink" title="二、What is Garbage"></a>二、What is Garbage</h4><p>​        在谈论垃圾回收算法和垃圾回收器之前，我们得先了解一下垃圾的基本概念。</p><h5 id="（1）Garbage的定义"><a href="#（1）Garbage的定义" class="headerlink" title="（1）Garbage的定义"></a>（1）Garbage的定义</h5><p>​        在高级语言中通常将没有引用指向的内存定义为垃圾。</p><h5 id="（2）Garbage的定位"><a href="#（2）Garbage的定位" class="headerlink" title="（2）Garbage的定位"></a>（2）Garbage的定位</h5><p>​        在python中，采用的是垃圾定位算法是reference count引用计数法，即记录每块内存被引用指向的数量，当指向某块内存的数量为0时，就把这块内存定义为垃圾，被GC自动释放（这让我想起了拓扑排序0.0），但这种算法有一个弊端，其无法解决“闭环”的情况，即多块内存相互引用形成闭环，与其他内存块无依赖。</p><p>​        而在java中，则使用Root Searching根可达算法来定位垃圾，从程序的根（如main方法）开始，若无法抵达某块内存，就把该块内存判作垃圾，由GC进行释放，该算法很好的解决了”内存闭环“问题。</p><h4 id="三、GC-Algorithms"><a href="#三、GC-Algorithms" class="headerlink" title="三、GC Algorithms"></a>三、GC Algorithms</h4><h5 id="（1）Mark-Sweep"><a href="#（1）Mark-Sweep" class="headerlink" title="（1）Mark-Sweep"></a>（1）Mark-Sweep</h5><p>​        标记清除法，将某块内存标记为垃圾，然后清除。算法的缺点，会产生碎片空间。</p><p><img src="/2022/10/17/GC/Mark-Sweep.png" alt="Mark-Sweep"></p><h5 id="（2）Copying"><a href="#（2）Copying" class="headerlink" title="（2）Copying"></a>（2）Copying</h5><p>​        拷贝法，将内存区分两半，每次运行时在一半中找出所有存活对象，然后整体性的复制到另外半边，同时排列好，然后把原来半边整体回收。算法的缺点是浪费内存。</p><p><img src="/2022/10/17/GC/Copying.png" alt="Copying"></p><h5 id="（3）Mark-Compact"><a href="#（3）Mark-Compact" class="headerlink" title="（3）Mark-Compact"></a>（3）Mark-Compact</h5><p>​        标记压缩法，将标记为垃圾的内存回收，并且排列好。缺点是效率相对较低。</p><p><img src="/2022/10/17/GC/Mark-Compact.png" alt="Mark-Compact"></p><h4 id="四、Garbage-Collector"><a href="#四、Garbage-Collector" class="headerlink" title="四、Garbage Collector"></a>四、Garbage Collector</h4><p>​        三种GC算法都有自己的缺点和优点，三种的综合运用，诞生了各种各样的垃圾回收器。</p><p><img src="/2022/10/17/GC/Garbage-Collector.png" alt="Garbage-Collector"></p><h5 id="（1）Serial（单线程STW垃圾回收，处理-lt-100MB）"><a href="#（1）Serial（单线程STW垃圾回收，处理-lt-100MB）" class="headerlink" title="（1）Serial（单线程STW垃圾回收，处理&lt;100MB）"></a>（1）Serial（单线程STW垃圾回收，处理&lt;100MB）</h5><p>​        New：A stop-the-world（STW），copying collector which uses a single GC thread.<br>​        Old：A stop-the-world（STW），mark-sweep-compact collector that uses a single GC thread.</p><p>​        即当Serial工作时，内存中所有的业务线程都停止，等Serial清扫完后继续。</p><h5 id="（2）Parallel（并行多线程PS-PO，处理-lt-1G）"><a href="#（2）Parallel（并行多线程PS-PO，处理-lt-1G）" class="headerlink" title="（2）Parallel（并行多线程PS+PO，处理&lt;1G）"></a>（2）Parallel（并行多线程PS+PO，处理&lt;1G）</h5><p>​        Parallel Scavenge：A stop-the-world（STW），copying collector which uses multiple GC threads.</p><p>​        Parallel Old：A stop-the-world（STW），mark-sweep-compact collector that uses multiple GC threads.</p><p>​        与Serial的区别在于多个GC并行处理。</p><h5 id="（3）Concurrent-GC（处理几十G）"><a href="#（3）Concurrent-GC（处理几十G）" class="headerlink" title="（3）Concurrent GC（处理几十G）"></a>（3）Concurrent GC（处理几十G）</h5><p>​        从线程角度理解Concurrent GC，即GC和业务线程能同时运行。 </p><p>​        ParNew：A stop-the-world（STW），copying collector which uses multiple GC threads.<br>               It differs from “Parallel Scavenge” in that it has enhancements that make it useable with CMS<br>​<br>       CMS：垃圾回收历史的重要节点！</p><h4 id="五、java的垃圾回收机制"><a href="#五、java的垃圾回收机制" class="headerlink" title="五、java的垃圾回收机制"></a>五、java的垃圾回收机制</h4><p>​        如果要将一整块内存用统一的一种算法解决，其实是比较困难的，所以在jdk中，将内存划分为两个“年代”，new（新生代）和old（老年代），综合运用不同的垃圾回收器来管理内存空间。</p><p>​        一个内存块在诞生时会被优先划分到新生代的eden区，在新生代区使用的GC算法是Copying算法，其中一次年轻代的清扫被称为YGC，其中90%的垃圾都会被回收，所以划分两个Copying区域没必要按照1:1的比例，其采用8:1:1的比例，清扫不掉的垃圾会被划分到survivor区。</p><p>​        若某个垃圾很顽固，经历了多次清扫仍然存活，就会被划分到old老年区，因为老年区中的都是顽固垃圾，没必要再去一遍遍清扫，等到内存装不下了再用Mark Compact算法进行回收。</p><p><img src="/2022/10/17/GC/jdk-and-GC.png" alt="jdk-and-GC"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h4&gt;&lt;p&gt;​        相对于c/c++，java、python等高级语言引进了Garbage Collector（GC）垃圾回收</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>从底层理解堆和栈的概念以及问题</title>
    <link href="http://example.com/2022/10/17/heap-and-stack/"/>
    <id>http://example.com/2022/10/17/heap-and-stack/</id>
    <published>2022-10-17T10:05:37.000Z</published>
    <updated>2022-10-17T10:07:13.779Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/10/17/heap-and-stack/img.jpg" alt="img">        </p><h4 id="（1）栈的概念"><a href="#（1）栈的概念" class="headerlink" title="（1）栈的概念"></a>（1）栈的概念</h4><p>​        在java程序中，存储main方法、Object o变量和m()方法的调用的结构，是一个先进后出的栈（每个线程单独占用一个栈），栈中的每块数据（m、main）由一个栈帧（stack frame指向）。</p><p>​        当每个程序块结束运行，会移到下一个栈帧，而栈中上一个程序块以及其里面的数据会被自动释放，如main方法中的Object o，虽然其会占用一定的空间，但当main程序执行完，不需要程序员手动释放。</p><h4 id="（2）堆的概念及其管理问题"><a href="#（2）堆的概念及其管理问题" class="headerlink" title="（2）堆的概念及其管理问题"></a>（2）堆的概念及其管理问题</h4><p>​        存储程序执行过程被手动new出来的对象的结构叫做堆。new出来的对象会占用堆的空间，若一直一直new对象，会产生爆内存的情况。堆与栈的最主要区别是，堆中的数据由程序员自己分配创建，而且得手动回收（将某处空间标记为可用）。</p><p>​        而对堆空间的处理，不同的语言使用不同的方法去管理，在对堆空间的处理过程中往往会伴随着两个最难调试的bug，野指针问题和并发问题。。</p><p>​        c/c++使用的是手工管理内存（malloc free/new delete）。若忘记释放，会产生memory leak内存泄漏问题（空间存在，但无法被使用），泄漏严重会演变为out of memory内存移除问题，可采用最朴素的调优方式–重启来解决；若多次释放，可能会产生并发线程问题，一个线程空间莫名其妙被另一个线程释放。</p><p>​        在java、python和go等高级语言中，引入了GC（Garbage Collector）垃圾回收器，用于管理堆中垃圾的释放问题，程序员只需要负责分配，而那些错综复杂互相依赖的空间将由GC进行释放，所以相对c/c++来说开发效率更高，大大地降低了程序员的门槛。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/10/17/heap-and-stack/img.jpg&quot; alt=&quot;img&quot;&gt;        &lt;/p&gt;
&lt;h4 id=&quot;（1）栈的概念&quot;&gt;&lt;a href=&quot;#（1）栈的概念&quot; class=&quot;headerlink&quot; title=&quot;（1）栈的概</summary>
      
    
    
    
    
  </entry>
  
</feed>
